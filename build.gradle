buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven'

version = project.output_version
group = 'com.github.percivalalb' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'MapMakingTools-1.16.4'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

repositories {
    maven { url "http://dvs1.progwml6.com/files/maven" }
    maven { url "https://modmaven.k-4u.nl" }
}

sourceSets {
	api
	main {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
		resources.srcDirs += 'src/generated/resources'
	}
	test {
		compileClasspath += sourceSets.api.output
		runtimeClasspath += sourceSets.api.output
	}
}

configurations {
	apiCompile.extendsFrom(compile)
}

minecraft {
    mappings channel: 'snapshot', version: project.mcp_mappings
	
	accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
	
    runs {
        client {
            taskName 'mapmakingtools_client'
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            mods {
                mapmakingtools {
                    source sourceSets.main
					source sourceSets.api
                }
            }
        }

        server {
            taskName 'mapmakingtools_server'
            workingDirectory project.file('run-server')
            property 'forge.logging.console.level', 'debug'
            mods {
                mapmakingtools {
                    source sourceSets.main
					source sourceSets.api
                }
            }
        }

        data {
            taskName 'mapmakingtools_data'
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'mapmakingtools', '--all', '--output', '"' + file('src/generated/resources/') + '"', '--existing', '"' + sourceSets.main.resources.srcDirs[0] + '"'
            mods {
                mapmakingtools {
                    source sourceSets.main
					source sourceSets.api
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.forge_version}"

	compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
	runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
}

task sourcesJar(type: Jar) {
	classifier = "sources"
	from sourceSets.main.allJava
	from sourceSets.api.allJava
}

task apiJar(type: Jar) {
	classifier = "api"
	from sourceSets.api.output
	from sourceSets.api.allJava
}

artifacts {
    archives sourcesJar
    archives apiJar
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    from sourceSets.main.output.classesDirs
    from sourceSets.api.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from sourceSets.api.output.resourcesDir

    manifest {
        attributes([
            "Specification-Title": "Map Making Tools",
            "Specification-Vendor": "percivalalb",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"percivalalb",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
