buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        gradlePluginPortal()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'
apply plugin: 'maven'
apply plugin: 'com.matthewprenger.cursegradle'

version = project.output_version
group = 'com.github.percivalalb' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "MapMakingTools-${project.target_mc_version}"

println "Version: ${version}"
println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

repositories {
    maven {
        url "http://dvs1.progwml6.com/files/maven"
        content {
            includeGroup "mezz.jei"
        }
    }
    maven {
        url "https://modmaven.k-4u.nl"
        content {
            includeGroup "mezz.jei"
        }
    }
}

sourceSets {
    api
    main {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
        resources.srcDirs += 'src/generated/resources'
    }
    test {
        compileClasspath += sourceSets.api.output
        runtimeClasspath += sourceSets.api.output
    }
}

configurations {
    apiCompile.extendsFrom(compile)
}

minecraft {
    mappings channel: project.mcp_channel, version: project.mcp_mappings

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            taskName 'mapmakingtools_client'
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            mods {
                mapmakingtools {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        server {
            taskName 'mapmakingtools_server'
            workingDirectory project.file('run-server')
            property 'forge.logging.console.level', 'debug'
            mods {
                mapmakingtools {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }

        data {
            taskName 'mapmakingtools_data'
            workingDirectory project.file('run')
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'mapmakingtools', '--all', '--output', '"' + file('src/generated/resources/') + '"', '--existing', '"' + sourceSets.main.resources.srcDirs[0] + '"'
            mods {
                mapmakingtools {
                    source sourceSets.main
                    source sourceSets.api
                }
            }
        }
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")
}

task sourcesJar(type: Jar) {
    archiveClassifier = "sources"
    from sourceSets.main.allJava
    from sourceSets.api.allJava
}

task apiJar(type: Jar) {
    archiveClassifier = "api"
    from sourceSets.api.output
    from sourceSets.api.allJava
}

artifacts {
    archives sourcesJar
    archives apiJar
}

task replaceResources(type: Copy) {
    outputs.upToDateWhen { false }
    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand([
            'version': project.version,
            'minecraft_version_range': project.minecraft_version_range,
            'forge_version_range': project.forge_version_range,
            'fml_version_range': project.fml_version_range,
        ])
    }
    into "$buildDir/resources/main/"
}

processResources {
    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
    finalizedBy replaceResources
}

jar {
    from sourceSets.main.output.classesDirs
    from sourceSets.api.output.classesDirs
    from sourceSets.main.output.resourcesDir
    from sourceSets.api.output.resourcesDir

    manifest {
        attributes([
            "Specification-Title": "Map Making Tools",
            "Specification-Vendor": "percivalalb",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": project.version,
            "Implementation-Vendor" :"percivalalb",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

curseforge {
    apiKey = findProperty('curseforge_api_key') ?: 0
    project {
        id = project.curseforge_project_id
        changelog = 'Changelog inprogress...'
        releaseType = findProperty("curseforge_release_type") ?: 'alpha'
        addArtifact apiJar
    }
}

import groovy.json.JsonOutput
import groovy.json.JsonSlurper
tasks.register('generateGBLangFile') {
    def inputFile = file('src/main/resources/assets/mapmakingtools/lang/en_us.json');
    def outputFile = file('src/main/resources/assets/mapmakingtools/lang/en_gb.json')
    inputs.files inputFile
    outputs.files outputFile

    doLast {
        String
        def json = new JsonSlurper().parseText(inputFile.text)
        json.replaceAll { key, value ->

            value = value.replaceAll("(?i)(c)olor", "\$1olour");
            value = value.replaceAll("(?i)(a)rmor", "\$1rmour");
            return value;
        }

        def dataGB = JsonOutput.toJson(json)
        dataGB = JsonOutput.prettyPrint(dataGB)
        outputFile.write(dataGB + System.getProperty("line.separator"));
    }
}
